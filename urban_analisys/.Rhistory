})
weather_info = strsplit(weather_info,',') # Parse each line by  a comma
headers = weather_info[[1]]               # Get Headers
weather_info = weather_info[-1]           # Drop Headers
# Now transform list into data frame
weather_info = do.call(rbind.data.frame, weather_info)
names(weather_info) = headers
# Post Retrieval Data Cleanup
weather_info <- data.frame(lapply(weather_info, as.character),
stringsAsFactors=FALSE)
# Convert numeric columns to numbers
numeric_cols = c(2,3,4,5,6,8,9,10,13)
weather_info[numeric_cols] = lapply(weather_info[numeric_cols],as.numeric)
# Fill in the 'dashes' to zero
weather_info[is.na(weather_info)]=0
# Rename the date column and drop the last html tag
colnames(weather_info)[14]="Date"
weather_info$Date = as.Date(substr(weather_info$Date,1,10))
# Concatenate DFs together
weather_frame = rbind(weather_frame, weather_info)
} # End loop through each day's weather csv link (l)
# Log ending time
if(is.function(logger)){
loginfo('All done!',logger)
}
# Write to SQLite DB
if(isS4(db_conn)){
dbWriteTable(db_conn, airport, weather_frame, overwrite=TRUE)
}
return(weather_frame)
}
if(interactive()){
##----Setup Test Logger-----
basicConfig()
addHandler(writeToFile, file="~/testing.log", level='DEBUG')
##----Test Parameters----
airport = 'KSEA'
dates = seq(from=as.Date('2015-05-01'),
to=as.Date('2015-05-06'),
by=1)
sql_db_name = 'weather.db'
##----Connect to SQLite DB----
con = dbConnect(SQLite(), dbname=sql_db_name)
weather_data = get_weather_data(airport, dates, logger=writeToFile, db_conn=con)
dbDisconnect(con)
}
install.packages("weatherData")
install.packages("weatherData")
library(weatherData)
firenze=getWeatherForDate("LIRQ", "2015-08-01")
firenze=getWeatherForDate("LIRQ", station_type="airportCode","2015-08-01")
a=curl(http://www.wunderground.com/history/airport/LIRQ/2015/8/1/CustomHistory.html?dayend=1&monthend=8&yearend=2015&req_city=NA&req_state=NA&req_statename=NA&format=1)
a=curl("http://www.wunderground.com/history/airport/LIRQ/2015/8/1/CustomHistory.html?dayend=1&monthend=8&yearend=2015&req_city=NA&req_state=NA&req_statename=NA&format=1")
a=curl::curl("http://www.wunderground.com/history/airport/LIRQ/2015/8/1/CustomHistory.html?dayend=1&monthend=8&yearend=2015&req_city=NA&req_state=NA&req_statename=NA&format=1")
a
readLines(u)
readLines(a)
getDetailedWeather("LIRQ",start_date="2015-01-01",opt_all_columns=T)
checkDataAvailability("LIRQ","2015-08-01")
curl::curl("http://www.wunderground.com/history/airport/LIRQ/2015/8/1/DailyHistory.html?format=1")
a=curl::curl("http://www.wunderground.com/history/airport/LIRQ/2015/8/1/DailyHistory.html?format=1")
readLines(a)
getDetailedWeather("NRT", "2014-04-29", opt_all_columns=T)
detach("package:weatherData", unload=TRUE)
remove.packages("weatherData", lib="~/R/x86_64-pc-linux-gnu-library/3.3")
devtools::install_github("alfcrisci/weatherData")
library(weatherData)
getDetailedWeather("LIRQ",start_date="2015-01-01",opt_all_columns=T)
getDetailedWeather("LIRQ","2015-01-01",opt_all_columns=T)
library(weatherData)
firenze=getWeatherForDate("LIRQ", "2015-08-01")
library(weatherData)
firenze=getWeatherForDate("LIRQ", "2015-08-01","2015-08-31")
firenze
library(weatherData)
firenze=getWeatherForDate("LIRQ", "2015-08-01","2015-08-31",opt_detailed = T)
library(weatherData)
firenze=getWeatherForDate("LIRQ", "2015-08-01","2015-08-31",opt_detailed = TRUE)
library(weatherData)
firenze=getWeatherForDate("LIRQ", "2015-08-01","2015-08-31")
library(weatherData)
firenze=getWeatherForDate("LIRQ", "2015-08-01",opt_detailed = TRUE)
curl:curl("https://www.wunderground.com/history/airport/LIRQ/2015/8/1/DailyHistory.html?format=1")
curl::curl("https://www.wunderground.com/history/airport/LIRQ/2015/8/1/DailyHistory.html?format=1")
curl:curl("https://www.wunderground.com/history/airport/LIRQ/2015/8/1/DailyHistory.html?format=1")
curl("https://www.wunderground.com/history/airport/LIRQ/2015/8/1/DailyHistory.html?format=1")
devtools::install_github("alfcrisci/weatherData")
devtools::install_github("alfcrisci/weatherData")
library(weatherData)
firenze=getWeatherForDate("LIRQ", "2015-08-01",opt_detailed = TRUE)
firenze
library(weatherData)
firenze=getWeatherForDate("LIRQ", "2015-08-01",opt_detailed = TRUE,opt_all_columns = FALSE)
library(weatherData)
firenze=getWeatherForDate("LIRQ", "2015-08-01",opt_detailed = TRUE,opt_all_columns = T)
firenze
library(biometeoR)
biometeoR::ssi(firenze$TemperatureC,firenze$Humidity)
apply(cbind(firenze$TemperatureC,firenze$Humidity)),1,ssi)
apply(cbind(firenze$TemperatureC,firenze$Humidity)),1,FUN=function(x) ssi(x[1],x[2]))
apply(cbind(firenze$TemperatureC,firenze$Humidity)),1,FUN=function(x) ssi(x[1],x[2]))
apply(cbind(firenze$TemperatureC,firenze$Humidity)),1,FUN=function(x) ssi(x[1],x[2]))
apply(cbind(firenze$TemperatureC,firenze$Humidity),1,FUN=function(x) ssi(x[1],x[2]))
mean(apply(cbind(firenze$TemperatureC,firenze$Humidity),1,FUN=function(x) ssi(x[1],x[2])))
ssi
ssi(mean(firenze$TemperatureC,na.rm=T),mean(firenze$Humidity,na.rm=T))
firenze=getWeatherForDate("LIRQ", station_type="airportCode","2015-08-10")
mean_hourly_param=mean(apply(cbind(firenze$TemperatureC,firenze$Humidity),1,FUN=function(x) ssi(x[1],x[2])))
mean_day_param=ssi(mean(firenze$TemperatureC,na.rm=T),mean(firenze$Humidity,na.rm=T))
getWeatherForDate("LIRQ", station_type="airportCode","2015-08-10")
firenze=getWeatherForDate("LIRQ", "2015-08-01",opt_detailed = TRUE,opt_all_columns = T)
firenze=getWeatherForDate("LIRQ", "2015-08-10",opt_detailed = TRUE,opt_all_columns = T)
mean_hourly_param=mean(apply(cbind(firenze$TemperatureC,firenze$Humidity),1,FUN=function(x) ssi(x[1],x[2])))
mean_day_param=ssi(mean(firenze$TemperatureC,na.rm=T),mean(firenze$Humidity,na.rm=T))
mean_hourly_param
mean_day_param
firenze
firenze=getWeatherForDate("LIRQ", "2015-07-21",opt_detailed = TRUE,opt_all_columns = T)
firenze
mean_hourly_param=mean(apply(cbind(firenze$TemperatureC,firenze$Humidity),1,FUN=function(x) ssi(x[1],x[2])))
mean_day_param=ssi(mean(firenze$TemperatureC,na.rm=T),mean(firenze$Humidity,na.rm=T))
mean_hourly_param
mean_day_param
100*(exp((17.625*firenze$Dew_PointC)/(243.04+firenze$Dew_PointC))/exp((17.625*temp_daily$tmed)/(243.04+firenze$TemperatureC)))
rh_stim=100*(exp((17.625*firenze$Dew_PointC)/(243.04+firenze$Dew_PointC))/exp((17.625*firenze$TemperatureC)/(243.04+firenze$TemperatureC)))
rh_stim
firenze$Humidity-rh_stim
apply(cbind(firenze$TemperatureC,firenze$Humidity),1,FUN=function(x) ssi(x[1],x[2])
)
range(apply(cbind(firenze$TemperatureC,firenze$Humidity),1,FUN=function(x) ssi(x[1],x[2])))
range(firenze$TemperatureC)
range(firenze$Humidity)
range(firenze$Dew_PointC)
max_day_param=ssi(max(firenze$TemperatureC,na.rm=T),mean(firenze$Humidity,na.rm=T))
max_day_param
max_day_param=ssi(max(firenze$TemperatureC,na.rm=T),min(firenze$Humidity,na.rm=T))
min_day_param
min_day_param=ssi(max(firenze$TemperatureC,na.rm=T),min(firenze$Humidity,na.rm=T))
min_day_param
rh_stim=100*(exp((17.625*firenze$Dew_PointC)/(243.04+firenze$Dew_PointC))/exp((17.625*firenze$TemperatureC)/(243.04+firenze$TemperatureC)))
min_day_param_dewp=ssi(max(firenze$TemperatureC,na.rm=T),min(rh_stim,na.rm=T))
min_day_param_dewp
min_day_param_dewp=ssi(max(firenze$TemperatureC,na.rm=T),mean(rh_stim,na.rm=T))
min_day_param_dewp
max(apply(cbind(firenze$TemperatureC,firenze$Humidity),1,FUN=function(x) ssi(x[1],x[2])))
cbind(firenze$TemperatureC,firenze$Humidity)
install.packages("feedeR")
library(feedeR)
res=feed.extract("https://news.google.com/news/section?hl=it&pz=1&ned=it&q=Xylella&num=100")
res=feed.extract("http://news.google.com/news?cf=all&hl=it&pz=1&ned=it&q=Xylella&output=rss")
res=feed.extract("http://news.google.com/news?cf=all&hl=it&pz=1&ned=it&q=Xylella&output=atom")
res=feed.extract("https://news.google.com/news?cf=all&hl=it&pz=1&ned=it&q=Xylella&output=rss")
res
res=feed.extract("https://news.google.com/news?cf=all&hl=it&pz=1&ned=it&q=Xylella&num=100&output=rss")
res
devtools::install_github("lchiffon/wordcloud2")
?wordcloud2
??wordcloud2
install.packages("humidr")
devtools::install_github("ijlyttle/humidr")
library(humidr)
humidr::t_wb(27,30)
?t_wb
t_wb(27,30)
t_wb(30,30)
install.packages("wikipediatrend")
library(wikipediatrend)
wp <- wp_trend(page = c("Fever","Fieber"),
from = "2013-08-01",
to   = "2015-12-31",
lang = c("en","de"))
wp <- wp_trend(page = c("Fever","Fieber"),
from = "2016-08-01",
to   = "2016-08-20",
lang = c("en","de"))
wp
install.packages("tibble")
library(leaflet)
mymap <- mymap %>%
addTiles(
'http://otile{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.jpeg',
attribution = 'Tiles Courtesy of <a href="http://www.mapquest.com/">MapQuest</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
) %>% setView(-97, 40, zoom = 4)
mymap
mymap <- leaflet() %>% addTiles()
##### Location Names
Location <- c("Atlanta ","Los Angeles","Chicago","New York","Dallas","Baltimore","Phoenix","Charlotte","Houston","San Antonio", "Seattle" )
#### Latitude and Longitude values for each of the above location
Lat <- c(33.74401,33.82377,41.78798,40.767309,32.88153,39.148492,33.45444,35.2406,29.935842,29.44838,47.714965 )
Lon <- c(-84.56032,-118.2668,-87.7738,-73.978308,-96.64601,-76.796211,-112.32401,-81.04028,-95.398436,-98.39908,-122.127166 )
#### Some hypothetical number of orders shipped out of each location
Orders <- c(1992,2500,3600,2252,3650,3450,4145,3945,5050,4300,1987)
#### Let us create some hypothetical class flags for the cities
Type <- c(rep("Yoda",5),rep("Vader",6))
### Create data set from the above vectors
df <- data.frame(Location, Lat,Lon,Orders,Type)
mymap <- mymap %>%
addTiles(
'http://otile{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.jpeg',
attribution = 'Tiles Courtesy of <a href="http://www.mapquest.com/">MapQuest</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
) %>% setView(-97, 40, zoom = 4)
mymap
mymap %>% addMarkers(data=df,df[1,"Lon"],df[1,"Lat"], icon = JS("L.icon({
iconUrl: 'http://icons.iconarchive.com/icons/artua/star-wars/128/Master-Joda-icon.png',
iconSize: [75, 75]
})"))
mymap %>% addMarkers(data=df,df[1,"Lon"],df[1,"Lat"], icon = JS("L.icon({
iconUrl: 'http://icons.iconarchive.com/icons/artua/star-wars/128/Master-Joda-icon.png',
iconSize: [75, 75]
})"))
?addMarkers
library(leaflet)
icon_social_A <- makeIcon(
iconUrl = "http://149.139.8.55/data/icons/icon_social_blue_A.png",
iconWidth = 50, iconHeight = 50,
)
icon_social_B <- makeIcon(
iconUrl = "http://149.139.8.55/data/icons/icon_social_B.png",
iconWidth = 50, iconHeight = 50,
)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = icon_social_B)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = icon_social_B,radius=10)
?addMarkers
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = icon_social_B,radius=c(10,5,10,20))
?addMarkers
require(rCharts)
map = Leaflet$new()
map$setView(c(40.71,-74.20),zoom=12)
map$setTemplate(afterScript = sprintf("<script>
var imageUrl = 'http://www.lib.utexas.edu/maps/historical/newark_nj_1922.jpg',
imageBounds = [[40.712216, -74.22655], [40.773941, -74.12544]]
L.imageOverlay(imageUrl, imageBounds,{ opacity: .5}).addTo(map);
</script>"))
map
class(map)
str(map)
library(leaflet)
library(htmltools)
library(htmlwidgets)
esriPlugin <- htmlDependency("leaflet.esri", "1.0.3",
src = c(href = "https://cdn.jsdelivr.net/leaflet.esri/1.0.3/"),
script = "esri-leaflet.js"
)
registerPlugin <- function(map, plugin) {
map$dependencies <- c(map$dependencies, list(plugin))
map
}
leaflet() %>% setView(-122.23, 37.75, zoom = 10) %>%
# Register ESRI plugin on this map instance
registerPlugin(esriPlugin) %>%
# Add your custom JS logic here. The `this` keyword
# refers to the Leaflet (JS) map object.
onRender("function(el, x) {
L.esri.basemapLayer('Topographic').addTo(this);
}")
devtools::install_github("ramnathv/htmlwidgets@joe/feature/onrender-data")
?onRender
el
x
library(leaflet)
data(quakes)
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addPopups(~long, ~lat, ~as.character(mag),
options = popupOptions(minWidth = 20, closeOnClick = FALSE, closeButton = FALSE))
cities <- read.csv(textConnection("
City,Lat,Long,Pop
Boston,42.3601,-71.0589,645966
Hartford,41.7627,-72.6743,125017
New York City,40.7127,-74.0059,8406000
Philadelphia,39.9500,-75.1667,1553000
Pittsburgh,40.4397,-79.9764,305841
Providence,41.8236,-71.4222,177994
"))
library(htmltools)
leaflet(cities) %>% addTiles() %>%
addMarkers(lng = ~Long, lat = ~Lat,
label = mapply(function(x, y) {
HTML(sprintf("<em>%s:</em> %s", htmlEscape(x), htmlEscape(y)))},
cities$City, cities$Pop, SIMPLIFY = F),
labelOptions = lapply(1:nrow(cities), function(x) {
labelOptions(opacity=0.9)
})
)
library(htmltools)
leaflet(cities) %>% addTiles() %>%
addMarkers(lng = ~Long, lat = ~Lat,
label = mapply(function(x, y) {
HTML(sprintf("<em>%s:</em> %s", htmlEscape(x), htmlEscape(y)))},
cities$City, cities$Pop, SIMPLIFY = F),
labelOptions = lapply(1:nrow(cities), function(x) {
labelOptions(opacity=0.9,closeOnClick = FALSE, closeButton = FALSE)
})
)
?labelOptions
library(htmltools)
leaflet(cities) %>% addTiles() %>%
addMarkers(lng = ~Long, lat = ~Lat,
label = mapply(function(x, y) {
HTML(sprintf("<em>%s:</em> %s", htmlEscape(x), htmlEscape(y)))},
cities$City, cities$Pop, SIMPLIFY = F),
labelOptions = lapply(1:nrow(cities), function(x) {
labelOptions(opacity=0.9,clickable = FALSE, noHide = FALSE)
})
)
library(htmltools)
leaflet(cities) %>% addTiles() %>%
addMarkers(lng = ~Long, lat = ~Lat,
label = mapply(function(x, y) {
HTML(sprintf("<em>%s:</em> %s", htmlEscape(x), htmlEscape(y)))},
cities$City, cities$Pop, SIMPLIFY = F),
labelOptions = lapply(1:nrow(cities), function(x) {
labelOptions(opacity=0.9,clickable = FALSE, noHide = TRUE)
})
)
icon_social_B <- makeIcon(
iconUrl = "http://149.139.8.55/data/icons/icon_social_B.png",
iconWidth = 50, iconHeight = 50
)
leaflet(cities) %>% addTiles() %>%
addMarkers(lng = ~Long, lat = ~Lat,icon = icon_social_B,
label = mapply(function(x, y) {
HTML(sprintf("<em>%s:</em> %s", htmlEscape(x), htmlEscape(y)))},
cities$City, cities$Pop, SIMPLIFY = F),
labelOptions = lapply(1:nrow(cities), function(x) {
labelOptions(opacity=0.9,clickable = FALSE, noHide = TRUE)
})
)
install.packages("scholar")
alf <- get_profile(id)
alf$name
id <- 'D6YYpg0AAAAJ'
alf <- get_profile(id)
alf$name
library(XLConnect)
library(scolar)
# Define my  id Alfonso Crisci
id <- 'D6YYpg0AAAAJ'
alf <- get_profile(id)
alf$name
library(scholar)
# Define my  id Alfonso Crisci
id <- 'D6YYpg0AAAAJ'
alf <- get_profile(id)
alf$name
get_citation_history(id)
publications=get_publications(id)
publications
publications[order(publications$year),]
publications[-order(publications$year),]
XLConnect::writeWorksheetToFile("pub.xls",publications,"pub")
library(RNCEP)
install.packages("RNCEP")
library(RNCEP)
wx.extent <- NCEP.gather(variable="omega", level=850,
months.minmax=c(1,12), years.minmax=c(1979,2015),
lat.southnorth=c(-10, 20), lon.westeast=c(-5, 30),
reanalysis2=FALSE, return.units=TRUE)
wx.ag <- NCEP.aggregate(wx.data=wx.extent, YEARS=TRUE, MONTHS=TRUE,DAYS=TRUE, HOURS=FALSE, fxn="mean")
wx.ag
saveRDS(wx.ag,"polo_1.rds")
saveRDS(wx.ag,"polo_1_850.rds")
saveRDS(wx.ag,"polo_2_850.rds")
str(wx.ag)
wx.extent <- NCEP.gather(variable="omega", level=850,
months.minmax=c(1,12), years.minmax=c(1979,2015),
lat.southnorth=c(20, 40), lon.westeast=c(-5, 20),
reanalysis2=FALSE, return.units=TRUE)
wx.ag <- NCEP.aggregate(wx.data=wx.extent, YEARS=TRUE, MONTHS=TRUE,DAYS=TRUE, HOURS=FALSE, fxn="mean")
saveRDS(wx.ag,"polo_2_850.rds")
wx.extent <- NCEP.gather(variable="omega", level=850,
months.minmax=c(1,12), years.minmax=c(1979,2015),
lat.southnorth=c(-10, 10), lon.westeast=c(30, 55),
reanalysis2=FALSE, return.units=TRUE)
wx.ag <- NCEP.aggregate(wx.data=wx.extent, YEARS=TRUE, MONTHS=TRUE,DAYS=TRUE, HOURS=FALSE, fxn="mean")
saveRDS(wx.ag,"polo_3_850.rds")
wx.extent <- NCEP.gather(variable="omega", level=850,
months.minmax=c(1,12), years.minmax=c(1979,2015),
lat.southnorth=c(20, 40), lon.westeast=c(20, 35),
reanalysis2=FALSE, return.units=TRUE)
wx.ag <- NCEP.aggregate(wx.data=wx.extent, YEARS=TRUE, MONTHS=TRUE,DAYS=TRUE, HOURS=FALSE, fxn="mean")
saveRDS(wx.ag,"polo_43_850.rds")
saveRDS(wx.ag,"polo_4_850.rds")
class(wx.ag)
lelngth(wx.ag)
length(wx.ag)
dim(wx.ag)
mean(wx.ag[,,dim(wx.ag)])
max(wx.ag[,,dim(wx.ag)])
wx.ag[,,1]
wx.ag
names(wx.ag)
str(wx.ag)
attr(wx.ag)
attr(wx.ag,"dimnames")
attr(wx.ag,"dimnames")[[3]]
gsub("_","-",gsub("_XX","",attr(wx.ag,"dimnames")[[3]])
)
mean(wx.ag[,,1:dim(wx.ag)])
as.list(wx.ag)
sapply(1:dim(wx.ag),function(x) mean(wx.ag[,,x])
)
1:dim(wx.ag)
sapply(1:length(dates),function(x) mean(wx.ag[,,x]))
dates=as.Date(gsub("_","-",gsub("_XX","",attr(wx.ag,"dimnames")[[3]])))
sapply(1:length(dates),function(x) mean(wx.ag[,,x]))
require(RNCEP)
options(download.file.method = "internal")
levels=c(850,700,500,300,250)
for ( i in levels)
{
wx.extent <- RNCEP::NCEP.gather(variable="omega", level=i,
months.minmax=c(1,12), years.minmax=c(1979,2016),
lat.southnorth=c(-10, 20), lon.westeast=c(-5, 30),
reanalysis2=FALSE, return.units=TRUE)
wx.ag <- RNCEP::NCEP.aggregate(wx.data=wx.extent, YEARS=TRUE, MONTHS=TRUE,DAYS=TRUE, HOURS=FALSE, fxn="mean")
dates_1=as.Date(gsub("_","-",gsub("_XX","",attr(wx.ag,"dimnames")[[3]])))
omega_1=sapply(1:length(dates),function(x) mean(wx.ag[,,x]))
saveRDS(wx.ag,paste0("polo_1_",i,".rds"))
wx.extent <- RNCEP::NCEP.gather(variable="omega", level=i,
months.minmax=c(1,12), years.minmax=c(1979,2015),
lat.southnorth=c(20, 40), lon.westeast=c(-5, 20),
reanalysis2=FALSE, return.units=TRUE)
wx.ag <- RNCEP::NCEP.aggregate(wx.data=wx.extent, YEARS=TRUE, MONTHS=TRUE,DAYS=TRUE, HOURS=FALSE, fxn="mean")
dates_2=as.Date(gsub("_","-",gsub("_XX","",attr(wx.ag,"dimnames")[[3]])))
omega_2=sapply(1:length(dates),function(x) mean(wx.ag[,,x]))
saveRDS(wx.ag,paste0("polo_2_",i,".rds"))
wx.extent <- RNCEP::NCEP.gather(variable="omega", level=i,
months.minmax=c(1,12), years.minmax=c(1979,2015),
lat.southnorth=c(-10, 10), lon.westeast=c(30, 55),
reanalysis2=FALSE, return.units=TRUE)
wx.ag <- RNCEP::NCEP.aggregate(wx.data=wx.extent, YEARS=TRUE, MONTHS=TRUE,DAYS=TRUE, HOURS=FALSE, fxn="mean")
dates_3=as.Date(gsub("_","-",gsub("_XX","",attr(wx.ag,"dimnames")[[3]])))
omega_3=sapply(1:length(dates),function(x) mean(wx.ag[,,x]))
saveRDS(wx.ag,paste0("polo_3_",i,".rds"))
wx.extent <- RNCEP::NCEP.gather(variable="omega", level=i,
months.minmax=c(1,12), years.minmax=c(1979,2015),
lat.southnorth=c(20, 40), lon.westeast=c(20, 35),
reanalysis2=FALSE, return.units=TRUE)
wx.ag <- RNCEP::NCEP.aggregate(wx.data=wx.extent, YEARS=TRUE, MONTHS=TRUE,DAYS=TRUE, HOURS=FALSE, fxn="mean")
dates_4=as.Date(gsub("_","-",gsub("_XX","",attr(wx.ag,"dimnames")[[3]])))
omega_4=sapply(1:length(dates),function(x) mean(wx.ag[,,x]))
saveRDS(wx.ag,paste0("polo_4_",i,".rds"))
temp_omega=data.frame(dates_1,omega_1,omega_2,omega_3,omega_4)
saveRDS(temp_omega,paste0("all_",i,".rds"))
}
dir()
library(rWeatherITA)
library(XLConnect)
library(biometeoR)
retrieveGSOD
library(rWeatherITA)
library(rWeatherITA)
devtools::install_github("environmentalinformatics-marburg/GSODTools", ref = "develop")
devtools::install_github("alfcrisci/rWeatherITA")
library(rWeatherITA)
retrieveGSOD(usaf="162390",start_year = 1979, end_year = 2015)
R.utils::downloadFile
?R.utils::downloadFile
?download.file
devtools::install_github("alfcrisci/rWeatherITA")
print("ftp://anonymous:alfcrisci@gmail.com@ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz")
download.file(url="ftp://anonymous:alfcrisci@gmail.com@ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz", destfile="161220-99999-1991.op.gz", method="auto")
download.file(url="ftp://ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz", destfile="161220-99999-1991.op.gz", method="auto")
download.file(url="ftp://anonymous@ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz", destfile="161220-99999-1991.op.gz", method="auto")
download.file(url="ftp:alfcrisci@gmail.com@ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz", destfile="161220-99999-1991.op.gz", method="auto")
download.file(url="anonymous@ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz", destfile="161220-99999-1991.op.gz", method="auto")
download.file(url="ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz", destfile="161220-99999-1991.op.gz", method="auto")
download.file(url="ftp://ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz", destfile="161220-99999-1991.op.gz", method="wget")
getOption("download.file.extra")
download.file(url="ftp://ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz", destfile="161220-99999-1991.op.gz", method="wget",extra="--ftp-user=anonymous --ftp-password=alfcrisci@gmail.com")
download.file(url="ftp://ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz", destfile="161220-99999-1991.op.gz", method="wget",extra="--ftp-user=ftp --ftp-password=alfcrisci@gmail.com")
download.file(url="ftp://ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz", destfile="161220-99999-1991.op.gz", method="wget",extra="--ftp-password=alfcrisci@gmail.com")
download.file(url="ftp://ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz", destfile="161220-99999-1991.op.gz", method="wb",extra="--ftp-password=alfcrisci@gmail.com")
download.file(url="ftp://ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz", destfile="161220-99999-1991.op.gz", method="curl",extra="--ftp-password=alfcrisci@gmail.com")
download.file(url="ftp://ftp.ncdc.noaa.gov/pub/data/gsod/1991/161220-99999-1991.op.gz", destfile="161220-99999-1991.op.gz", method="auto",extra="--ftp-password=alfcrisci@gmail.com")
devtools::install_github("lchiffon/wordcloud2")
library(wordcloud2)
demoFreq
wordcloud2(demoFreq, figPath =("/home/alf/Scrivania/lav_perugia/basin8bit.png", size = 1.5,color = "skyblue")
wordcloud2(demoFreq, figPath ="/home/alf/Scrivania/lav_perugia/basin8bit.png", size = 1.5,color = "skyblue")
wordcloud2(demoFreq, figPath ="/home/alf/Scrivania/lav_perugia/basin8bit.png", size = 0.5,color = "skyblue")
wordcloud2(demoFreq, figPath ="/home/alf/Scrivania/lav_perugia/index.png", size = 1.5,color = "skyblue")
figPath = system.file("examples/t.png",package = "wordcloud2")
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
figPath
wordcloud2(demoFreq, figPath ="/home/alf/Scrivania/lav_perugia/index.png", size = 1.5,color = "skyblue")
wordcloud2(demoFreq, figPath ="/home/alf/Scrivania/lav_perugia/index.png", size = 1.5,color = "skyblue")
wordcloud2(demoFreq, figPath ="/home/alf/Scrivania/lav_perugia/basin8bit.png", size = 0.5,color = "skyblue")
letterCloud(demoFreq, word = "WORDCLOUD2", wordSize = 1)
letterCloud(demoFreq, word = "WORDCLOUD2", wordSize = 1)
library(rgdal)
library(raster)
library(leaflet)
library(rgeos)
library(osmar)
library(doBy)
library(RColorBrewer)
library(mapview)
library(htmlwidgets)
library(htmltools)
library(webshot)
library(geosphere)
library(cleangeo)
library(classInt)
library(mgcv)
setwd("/home/alf/Scrivania/lav_parma_root/qgis_project")
building_caire_geo_civ_ls=readRDS("building_caire_civ_data_ls.rds")
mapview(building_caire_geo_civ_ls,zcol="RC_75_N"")
mapview(building_caire_geo_civ_ls,zcol="RC_75_N")
